#!/bin/env perl6
use Test;

use lib 'lib';

use FASTAptamer::ClusterParser;
use File::Temp;

chdir 't/data';

create_file('A.cluster.fa');

delete_file_if_exists('H.cluster.fa');

{
    my @filenames          = < howdy.1.abc.txt bye.2.abc.txt>;
    my @expected_basenames = <howdy bye>;
    my @result             = basenames(@filenames); 
    is_deeply(@result, @expected_basenames,'basenames works');
}

{
    my @fh = get_fh_for_clusters();
    my @expected_filenames = <
        A.cluster.fa
        B.cluster.fa
        C.cluster.fa
        D.cluster.fa
        E.cluster.fa
        F.cluster.fa
        G.cluster.fa
    >;

    is_deeply(  [@fh.map({ ~ $_}).sort],
                [@expected_filenames.sort],
                'get_fh_for_clusters'
    );
}

{
    my $result = extract_cluster_info( 'A.cluster.fa' );
    my $expected = expected_cluster_info();
    is_deeply($result, $expected, 'Extracted cluster info');
}

{
    my $result = extract_item_info( 'A.cluster.fa' );
    my $expected = expected_item_info();
    is_deeply($result, $expected, 'Extracted item info');
}

create_file('H.cluster.fa');

{
    my $expected  = text('cluster_table');
    my @filenames = ('A.cluster.fa', 'G.cluster.fa', 'H.cluster.fa');
    my $result    = cluster_table_for( @filenames );
    is($result, $expected, 'Created cluster table for A, G, and H cluster files');
}

unlink('H.cluster.fa');

done;


#------- Functions -------

sub expected_cluster_info
{
    return  %(  RQMSHKIAPTVCWLNEFGDY => 133,
                KLHNAIYFWCMQTPDVERGS =>  77,
                CHTVFYILNWGEMSDQAKRP =>   2,
            );
}

sub expected_item_info
{
    return %(   RQMSHKIAPTVCWLNEFGDY => 100, 
                RQMSHKIAPTVDWLNEFGDY =>  14, 
                RQMSHKIAPTVCWLPEFGDY =>  10, 
                RQMSHKIAPTVCWLNEFGDW =>   9, 
                CHTVFYILNWGEMSDQAKRP =>   2,
                KLHNAIYFWCMQTPDVERGS =>  70, 
                KMIPAIYFWCMQTPDVFSHS =>   7, 
           );
}

        
sub create_file ($filename)
{
    my $text = text($filename);
    spurt($filename, $text);
    return;
}

sub delete_file_if_exists ($filename)
{
    unlink $filename if ( $filename.IO.e);
}

#! Text "files" for use in testing
sub text ($name)
{
    given $name {

# Reduced indentation to avoid warnings

when 'A.cluster.fa' { return q:to/END/;

    >1-100-100-1-1-0
    RQMSHKIAPTVCWLNEFGDY
    >542-14-14-1-2-1
    RQMSHKIAPTVDWLNEFGDY
    >730-10-10-1-3-1
    RQMSHKIAPTVCWLPEFGDY
    >802-9-9-1-4-1
    RQMSHKIAPTVCWLNEFGDW
    >2-70-70-2-1-0
    KLHNAIYFWCMQTPDVERGS
    >996-7-7-2-2-6
    KMIPAIYFWCMQTPDVFSHS
    >2999-2-2-3-1-0
    CHTVFYILNWGEMSDQAKRP
    END
}

when 'G.cluster.fa' { return q:to/END/;

    >1-50-50-1-1-0
    RQMSHKIAPTVCWLNEFGDY
    >542-7-7-1-2-1
    RQMSHKIAPTVDWLNEFGDY
    >730-5-5-1-3-1
    RQMSHKIAPTVCWLPEFGDY
    >802-4-4-1-4-1
    RQMSHKIAPTVCWLNEFGDW
    >3-42-42-3-1-0
    KLHNAIYFWCMQTPDVERGS
    >396-7-7-3-2-6
    KMIPAIYFWCMQTPDVFSHS
    >2-179-179-2-1-0
    DIATEGPKSRMCQHFWLNYV
    >103-17-17-2-1-3
    DIATFGPKSRMDRHFWLNYV
    END
}

when 'H.cluster.fa' { return q:to/END/;

    >1-40-50-1-1-0
    RQMSHKIAPTVCWLNEFGDY
    >42-8-8-1-2-1
    RQMSHKIAPTVDWLNEFGDY
    >789-5-5-2-1-0
    SWCFYMQPNGELIHKVTADR
    >855-2-2-3-1-0
    LNVWEFDSQIHKATYCMRPG
    END
}

when 'cluster_table' { return q:to/END/;

    seed sequence	A	G	H
    RQMSHKIAPTVCWLNEFGDY	133	66	48
    KLHNAIYFWCMQTPDVERGS	77	49	-
    CHTVFYILNWGEMSDQAKRP	2	-	-
    DIATEGPKSRMCQHFWLNYV	-	196	-
    SWCFYMQPNGELIHKVTADR	-	-	5
    LNVWEFDSQIHKATYCMRPG	-	-	2
    END
}

# Normal indentation resumes ...
    }
    flunk("no text chunk '$name' implemented");
}
